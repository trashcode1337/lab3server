package com.drrufus.lab1server.endpoints;

import com.drrufus.autogenerated.CreateUserRequest;
import com.drrufus.autogenerated.CreateUserResponse;
import com.drrufus.autogenerated.DeleteUserRequest;
import com.drrufus.autogenerated.DeleteUserResponse;
import com.drrufus.autogenerated.GetUserRequest;
import com.drrufus.autogenerated.GetUserResponse;
import com.drrufus.autogenerated.GetUserResponse.Users;
import com.drrufus.autogenerated.UpdateUserRequest;
import com.drrufus.autogenerated.UpdateUserResponse;
import com.drrufus.autogenerated.User;
import com.drrufus.lab1server.dao.UserDao;
import com.drrufus.lab1server.exceptions.ServiceFault;
import com.drrufus.lab1server.exceptions.ServiceFaultException;
import com.drrufus.lab1server.exceptions.ValidationException;
import com.drrufus.lab1server.service.UserService;
import java.util.List;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ws.server.endpoint.annotation.Endpoint;
import org.springframework.ws.server.endpoint.annotation.PayloadRoot;
import org.springframework.ws.server.endpoint.annotation.RequestPayload;
import org.springframework.ws.server.endpoint.annotation.ResponsePayload;


@Endpoint
public class UserEndpoint {
    
    private static final String NAMESPACE_URI = "http://drrufus.com/autogenerated";
    
    private static transient Logger logger = LoggerFactory.getLogger(UserEndpoint.class);
    
    @Autowired
    private UserService userService;
    
    @PayloadRoot(namespace = NAMESPACE_URI, localPart = "createUserRequest")
    @ResponsePayload
    public CreateUserResponse createUser(@RequestPayload CreateUserRequest request) {
        logger.info("A new received get-request with params:");
        logger.info("login: {}; name: {}; email: {}; password: {}",
                request.getLogin(), request.getName(),
                request.getEmail(), request.getPass());
        CreateUserResponse response = new CreateUserResponse();
        try {
            int id = userService.createUser(request.getLogin(), request.getName(), 
                    request.getEmail(), request.getPass());
            response.setNewId(id);
        }
        catch (ValidationException ve) {
            throw new ServiceFaultException("ERROR",new ServiceFault(
                "NOT_CREATED", ve.getMessage()));
        }
        catch (Exception e) {
            logger.error("Error while inserting: " + e.getMessage());
            throw new ServiceFaultException("ERROR",new ServiceFault(
                "NOT_CREATED", "The user with specified params was not created"));
        }
        return response;
    }
    
    @PayloadRoot(namespace = NAMESPACE_URI, localPart = "updateUserRequest")
    @ResponsePayload
    public UpdateUserResponse updateUser(@RequestPayload UpdateUserRequest request) {
        logger.info("A new received update-request with params:");
        logger.info("id: {}; login: {}; name: {}; email: {}; password: {}",
                request.getId(), request.getLogin(), request.getName(),
                request.getEmail(), request.getPass());
        UpdateUserResponse response = new UpdateUserResponse();
        try {
            userService.modifyUser(request.getId(), request.getLogin(), request.getName(), 
                    request.getEmail(), request.getPass());
            response.setResult("DONE");
        }
        catch (ValidationException ve) {
            logger.info("Validation exception: " + ve.getMessage());
            throw new ServiceFaultException("ERROR",new ServiceFault(
                "NOT_UPDATED", ve.getMessage()));
        }
        catch (Exception e) {
            logger.error("Error while updating: " + e.getMessage());
            throw new ServiceFaultException("ERROR",new ServiceFault(
                "NOT_UPDATED", "The user with specified params was not updated"));
        }
        return response;
    }
    
    @PayloadRoot(namespace = NAMESPACE_URI, localPart = "deleteUserRequest")
    @ResponsePayload
    public DeleteUserResponse deleteUser(@RequestPayload DeleteUserRequest request) {
        logger.info("A new received delete-request for id={}", request.getId());
        DeleteUserResponse response = new DeleteUserResponse();
        try {
            userService.deleteUser(request.getId());
            response.setResult("DONE");
        }
        catch (ValidationException ve) {
            throw new ServiceFaultException("ERROR",new ServiceFault(
                "NOT_UPDATED", ve.getMessage()));
        }
        catch (Exception e) {
            logger.error("Error while deleting: " + e.getMessage());
            throw new ServiceFaultException("ERROR",new ServiceFault(
                "NOT_UPDATED", "The user with specified params was not deleted"));
        }
        return response;
    }
    
    @PayloadRoot(namespace = NAMESPACE_URI, localPart = "getUserRequest")
    @ResponsePayload
    public GetUserResponse getUser(@RequestPayload GetUserRequest request) {
        logger.info("A new received get-request with params:");
        logger.info("id: {}; login: {}; name: {}; email: {}; password: {}",
                request.getId(), request.getLogin(), request.getName(),
                request.getEmail(), request.getPass());
        GetUserResponse response = new GetUserResponse();
        try {
            List<User> users = userService.getUserByParams(request.getId(), request.getLogin(), 
                    request.getName(), request.getEmail(), request.getPass());
            response.setUsers(new Users());
            for (User user : users) {
                logger.info("user {}/{}", user.getLogin(), user.getPass());
                response.getUsers().getUser().add(user);
            }
        }
        catch (ValidationException ve) {
            throw new ServiceFaultException("ERROR",new ServiceFault(
                "NOT_FOUND", ve.getMessage()));
        }
        catch (Exception e) {
            logger.error("Error while searching: " + e.getMessage());
            throw new ServiceFaultException("ERROR",new ServiceFault(
                "NOT_FOUND", "The user with specified params is not found"));
        }
        
        return response;
    }
}
